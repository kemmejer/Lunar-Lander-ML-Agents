using System;
using System.Diagnostics;
using UnityEngine;

[Serializable]
[DebuggerDisplay("Value = {value}")]
public class RandomInt : IRandomValue
{
    /// <summary>
    /// Random value generated by a GenerateRandomValue call
    /// Can be used for read and write operations
    /// </summary>
    [HideInInspector]
    public int value;

    /// <summary>
    /// 0 = Mean
    /// 1 = Deviation
    /// </summary>
    public int[] parameter = new int[2];

    /// <summary>
    /// Returns a random value each time is is being accessed
    /// </summary>
    public int RndValue
    {
        get
        {
            GenerateRandomValue();
            return value;
        }
    }

    public int Mean => parameter[0];
    public int Deviation => parameter[1];

    public int Max => Mean + Deviation;
    public int Min => Math.Max(Mean - Deviation, 0);

    /// <summary>
    /// Generates a random value around the mean value using: mean +- deviation
    /// Cannot generate negative numbers
    /// </summary>
    public void GenerateRandomValue()
    {
        value = UnityEngine.Random.Range(Min, Max);
    }

}
