using System;
using System.Diagnostics;
using UnityEngine;

[Serializable]
[DebuggerDisplay("Value = {value}")]
public class RandomFloat : IRandomValue
{
    /// <summary>
    /// Random value generated by a GenerateRandomValue call
    /// Can be used for read and write operations
    /// </summary>
    [HideInInspector]
    public float value;

    /// <summary>
    /// x = Mean
    /// y = Deviation
    /// </summary>
    public Vector2 parameter;

    /// <summary>
    /// Returns a random value each time is is being accessed
    /// </summary>
    public float RndValue
    {
        get
        {
            GenerateRandomValue();
            return value;
        }
    }

    public float Mean => parameter.x;
    public float Deviation => parameter.y;

    public float Max => Mean + Deviation;
    public float Min => Mathf.Max(Mean - Deviation, 0.0f);

    /// <summary>
    /// Generates a random value around the mean value using: mean +- deviation
    /// Cannot generate negative numbers
    /// </summary>
    public void GenerateRandomValue()
    {
        value = Mathf.Max(UnityEngine.Random.Range(Min, Max), 0.0f);
    }

}
